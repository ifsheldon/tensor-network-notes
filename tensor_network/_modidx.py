# Autogenerated by nbdev

d = { 'settings': { 'doc_baseurl': '/tensor-network',
                'doc_host': 'https://ifsheldon.github.io',
                'git_url': 'https://github.com/ifsheldon/tensor-network',
                'lib_path': 'tensor_network'},
  'syms': { 'tensor_network.eigen_decomposition': { 'tensor_network.eigen_decomposition.eigs_power': ( '1-6.html#eigs_power',
                                                                                                       'tensor_network/eigen_decomposition.py'),
                                                    'tensor_network.eigen_decomposition.eigs_power_ref': ( '1-6.html#eigs_power_ref',
                                                                                                           'tensor_network/eigen_decomposition.py'),
                                                    'tensor_network.eigen_decomposition.rand_hermitian_matrix': ( '1-6.html#rand_hermitian_matrix',
                                                                                                                  'tensor_network/eigen_decomposition.py'),
                                                    'tensor_network.eigen_decomposition.rand_real_symmetric_matrix': ( '1-6.html#rand_real_symmetric_matrix',
                                                                                                                       'tensor_network/eigen_decomposition.py')},
            'tensor_network.setup_ref_code_import': {},
            'tensor_network.tensor_decomposition': { 'tensor_network.tensor_decomposition.make_matrix': ( '1-8.html#make_matrix',
                                                                                                          'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.outer_product': ( '1-8.html#outer_product',
                                                                                                            'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.rank1_decomposition': ( '1-8.html#rank1_decomposition',
                                                                                                                  'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.rank1_decomposition_gradient_based': ( '1-8.html#rank1_decomposition_gradient_based',
                                                                                                                                 'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.rank1_tc': ( '1-8.html#rank1_tc',
                                                                                                       'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.reduced_matrix': ( '1-8.html#reduced_matrix',
                                                                                                             'tensor_network/tensor_decomposition.py'),
                                                     'tensor_network.tensor_decomposition.tucker_decomposition': ( '1-8.html#tucker_decomposition',
                                                                                                                   'tensor_network/tensor_decomposition.py')},
            'tensor_network.tensor_gates.functional': { 'tensor_network.tensor_gates.functional._float_convert_to_tensor': ( '3-1.html#_float_convert_to_tensor',
                                                                                                                             'tensor_network/tensor_gates/functional.py'),
                                                        'tensor_network.tensor_gates.functional.apply_gate': ( '2-5.html#apply_gate',
                                                                                                               'tensor_network/tensor_gates/functional.py'),
                                                        'tensor_network.tensor_gates.functional.pauli_operator': ( '3-1.html#pauli_operator',
                                                                                                                   'tensor_network/tensor_gates/functional.py'),
                                                        'tensor_network.tensor_gates.functional.rotate': ( '3-1.html#rotate',
                                                                                                           'tensor_network/tensor_gates/functional.py')},
            'tensor_network.tensor_utils': { 'tensor_network.tensor_utils.identity_tensor': ( '1-4.html#identity_tensor',
                                                                                              'tensor_network/tensor_utils.py'),
                                             'tensor_network.tensor_utils.zeros_state': ( '3-1.html#zeros_state',
                                                                                          'tensor_network/tensor_utils.py')},
            'tensor_network.utils': { 'tensor_network.utils.check_quantum_gate': ( 'utils.html#check_quantum_gate',
                                                                                   'tensor_network/utils.py'),
                                      'tensor_network.utils.check_state_tensor': ( 'utils.html#check_state_tensor',
                                                                                   'tensor_network/utils.py'),
                                      'tensor_network.utils.inverse_permutation': ( 'utils.html#inverse_permutation',
                                                                                    'tensor_network/utils.py'),
                                      'tensor_network.utils.iterable_have_common': ( 'utils.html#iterable_have_common',
                                                                                     'tensor_network/utils.py'),
                                      'tensor_network.utils.map_float_to_complex': ( 'utils.html#map_float_to_complex',
                                                                                     'tensor_network/utils.py'),
                                      'tensor_network.utils.unify_tensor_dtypes': ( 'utils.html#unify_tensor_dtypes',
                                                                                    'tensor_network/utils.py')}}}
